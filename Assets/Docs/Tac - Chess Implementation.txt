TAC: Strategy Game Architecture
Chess Implementation
Copyright (c) 2021 Ted Brown

This document describes how a standard game of chess would be implemented in Tac.

Each game is a Battle between two Entities -- the Players -- on a Board that is an 8x8 grid of Tile entities.

Player Attributes
* Forward Direction (1 or -1)

# Pieces
Each player has a collection of entities, known as Pieces. Each piece has an attribute called PieceType, which resolves to an enum with these names.
* Bishop
* King
* Knight
* Pawn
* Rook
* Queen

Attributes
* Slide Distance
  * Pawn & Knight: 0
  * King: 1
  * Bishop, Rook, Queen: 7

# Abilities (Summary)
Each piece has one or more of these Abilities:
* Slide Move up to N units in XY Direction
* Slide Capture up to N units in XY Direction
* Offset Move X + Y
* Offset Capture X + Y
* Castle
* En Passant
* Single Step
* Single Step and Promotion
* Pawn Capture
* Pawn Capture and Promotion
* Double Step

# Effects
Abilities generate sequences with the following Effects:
* Move piece to XY
* Remove piece at XY
* Promote piece to PieceType

# Queries
Ability logic relies on Queries that inspect varies states and attributes of objects in the game. 
* Has this piece moved? (Castling, Double Step)
* Is the player's King in Check?
* Did this pawn use a Double Step last turn? (En Passant)
* Is this Tile threatened by an opponent? (Castling)
* Is this coordinate in bounds?
* Is an enemy piece on this tile?
* Is an allied piece on this tile?
* Is this coordinate occupied?
* Is this coordinate on the opponent's home row? (Promotion)
* (castling...)

* History: Get last Piece used by Player
* History: Get last Ability used by Piece
* Board: Get Tile at Coordinate
* Board: Get Piece at Coordinate
* Player: Get Pieces of PieceType
* Piece: Get Coordinate
* Battle: Get Pieces with Sequence that includes "Capture Piece at Coordinate" (this is for "check" and "checkmate")

# Battle Rules
- At the start of a turn, sequences for the inactive player are generated.
- If any sequences result in the King being captured, the active player is in Check.
- Sequences for the active player are generated.
- Each sequence is processed to determine if it results in a Check state. If so, that sequence is removed from the list of valid sequences.
- If the active player has zero valid sequences, and they are in Check, they lose. Exit.
- If the active player has zero valid sequences, and they are Not in Check, it is Stalemate. Exit.
- Active player activates a sequence.
- Swap active and inactive players. Goto 10.

# Ability Logic

Each ability has custom logic that generates any number, including zero, of possible sequences. Working within this logic is the possibly the trickiest aspect of development, as abilities operate independently of each other. 

For example, if a Pawn can use a "Forward Move", but also a "Forward Move And Promotion", how does one do "if this then not that?" Answer: you  state that a basic Forward Move is not valid if the target tile is on the opposing home row. Likewise, a Forward Move and Promotion is only valid if the target tile is on the opposing home row.

# Slide Move up to N units in XY Direction (Bishop, King, Queen, Rook)
N is the Slide Distance attribute for that piece.
* Set base coordinate using piece's Tile
* For each offset (e.g. 1,0 for orthogonal right)
  * For i = 0 and i < n
    * coordinate = base + (offset * i)
    * If coordinate is out of bounds, break
      * If coordinate is occupied, break
      * If would result in check, continue
      * Add to list

# Slide Capture up to N units in XY Direction (Bishop, King, Queen, Rook)
N is the Slide Distance attribute for that piece.
* Set base coordinate using piece's Tile
* For each offset (e.g. 1,0 for orthogonal right)
  * For i = 0 and i < n
    * coordinate = base + (offset * i)
    * If coordinate is out of bounds, break
      * If coordinate has ally, break
      * If coordinate has no enemy, continue
      * If it would result in check, break
      * Add to list

# Offset Move (Knight)
* Set base coordinate using piece's Tile
* For each valid base + offset
  * If the coordinate is out of bounds, continue
  * If the coordinate is occupied, continue
  * If it would result in check, continue
  * Add to list

# Offset Capture (Knight)
* Set base coordinate using piece's Tile
* For each valid base + offset
  * If the coordinate is out of bounds, continue
  * If the coordinate has no enemy, continue
  * If it would result in check, continue
  * Add to list

# Single Step (Pawn)
* Set base coordinate using piece's Tile
* Set offset using player's Forward Direction attribute
* If the coordinate is on the opponent's home row, continue
* If coordinate is occupied, continue
* If it would result in check, continue
* Add to list

# Single Step and Promotion (Pawn)
* Set base coordinate using piece's Tile
* Set offset using player's Forward Direction attribute
* If the coordinate is not on the opponent's home row, continue
* If coordinate is occupied, continue
* If it would result in check, continue
* For each valid promotion type
  * Add to list

# Double Step (Pawn)
* If this piece has moved, continue
* Set base coordinate using piece's Tile
* Set offset using player's Forward Direction attribute times 2
* If coordinate is occupied, continue
* If it would result in check, continue
* Add to list

# Pawn Capture (Pawn)
* Set base coordinate using piece's Tile
* Set offsets using player's Forward Direction attribute and x += 1, x -= 1
* For each offset
  * If the coordinate is on the opponent's home row, continue
  * If coordinate is empty, continue
  * If coordinate is occupied by an allied piece, continue
  * If it would result in check, continue
  * Add to list

# Pawn Capture and Promotion (Pawn)
* Set base coordinate using piece's Tile
* Set offsets using player's Forward Direction attribute and x += 1, x -= 1
* For each offset
  * If the coordinate is not on the opponent's home row, continue
  * If coordinate is empty, continue
  * If coordinate is occupied by an allied piece, continue
  * If it would result in check, continue
  * For each valid promotion type
    * Add to list

# En Passant (Pawn)
* If opponent's last move was not a Double Step, continue
* Target pawn = Last piece moved by opponent
* Set base coordinate using piece's Tile
* Set offsets using x += 1, x -= 1
* For each offset
  * If target pawn is not at coordinate, continue
  * If move would result in check, continue
  * Add to list

# Castle (King)
* If King has moved, continue
* If player is in check, continue
* Set base coordinate using piece's Tile
* For each offset (-1,0 and 1,0)
  * If coordinate at base plus offset is occupied, continue
  * If coordinate at base plus offset is threatened by enemy, continue
  * If coordinate at base plus offset times 2 is occupied, continue
  * If coordinate at base plus offset times 2 is threatened by enemy, continue
  * Rook = Rook on this offset side (need an elegant way to get this)
  * If Rook is not there, continue
  * If Rook has moved, continue
  * Add to list

