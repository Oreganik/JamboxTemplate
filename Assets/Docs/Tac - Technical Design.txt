TAC
Strategy Game Architecture
Copyright (c) 2021 Ted Brown

Technical Design

TAC (short for Tactical Architecture Contraption, I guess) is a C# library for building turn-based tactical battle games, such as chess, a roguelike, or a CCG (like Magic: The Gathering). While it is harbored in a Unity project, it does not use UnityEngine code, and can serve as a foundation for CLI projects as well. This is especially useful if you want to train an AI or do smoke tests.

BATTLE contains references to all key objects in the scene. It manages action flow, and stores a history of actions for replays and undos.

BOARD is the spatial component of the Battle.
	- Chess: 8x8 board
	- Roguelike: A room with tiles
	- CCG: Zones (e.g. battlefield, hand, exile, graveyard)

An ENTITY is something that can use actions and/or be targeted by effects. It is "persistent," meaning it stays on the board until it is specifically removed. Entities have an Owner and a Controller, which means Owners can "take control" over the entities of others.
	- Chess: Pawn, Queen, King
	- Roguelike: Hero, Door, Sword
	- CCG: Monster, Player, Card

An ATTRIBUTE is a field on an entity. It is usually an integer.
	- Chess: Coordinate, HasCastled
	- Roguelike: Health, Armor
	- CCG: Mana, Tapped

An EFFECT is a discrete change to a single attribute of an entity.
	- Chess: Change coordinate to XY (e.g. "Move")
	- Roguelike: Reduce target health by X (e.g. "Damage")
	- CCG: Increase mana of owner by X

A SEQUENCE is a collection of 1 or more effects that activate serially. It is "ephemeral," meaning it is spawned at the beginning of the turn and destroyed at the end of it. It can still spawn persistent entities as one of its effects. 
	- Chess: Remove the piece at XY and move to that coordinate (e.g. "Capture")
	- Roguelike: Reduce stamina by X and reduce target's health by Y (e.g. "Attack")
	- CGG: Create Monster on Battlefield and move the casting entity to the Graveyard (e.g. "Summon")

An ABILITY generates sequences. Most entities have abilities. The ability handles the logic that confirms whether or not they can be used that turn. For example, if an ability is "do damage to a target," and there are three valid targets, then three sequences would be generated, one for each target. If there are options within the effect (i.e. do this -or- that), then they are validated individually and added as individual sequences.
	- Chess: Move diagonally up to 8 units away
	- Roguelike: Attack a target 1 unit away
	- CCG: Deal 3 damage to a target player
